def paramsList = load 'scripts/pipelineParams.groovy'

properties([
    parameters(paramsList)
])

def validateInputs() {
    if (!params.IMAGE_TAG?.trim()) error("‚ùå IMAGE_TAG is required")
    if (!params.ECR_REPO?.trim()) error("‚ùå ECR_REPO is required")
    if (!params.JIRA_TICKET_ID?.trim()) error("‚ùå JIRA_TICKET_ID is required")
}

pipeline {  
    agent any

    environment {
        APP_NAME     = "my-app"
        COLOR        = "green"
        NAMESPACE    = "${APP_NAME}-${params.ENVIRONMENT}"
        RELEASE_NAME = "${APP_NAME}-${params.ENVIRONMENT}-${COLOR}"
        VALUES_FILE  = "values-${COLOR}.yaml"
    }

    stages {

        stage('üß™ Validate Inputs') {
            steps {
                script {
                    validateInputs()
                    echo "‚úÖ Input validation passed"
                }
            }
        }

        stage('üîê Fetch Secrets from AWS Secrets Manager') {
            steps {
                script {
                    def dbSecret = sh(
                        script: """
                            aws secretsmanager get-secret-value \
                                --secret-id myapp/${params.ENVIRONMENT}/db-creds \
                                --query SecretString --output text
                        """,
                        returnStdout: true
                    ).trim()

                    def secretJson = readJSON text: dbSecret
                    env.DB_USER = secretJson.username
                    env.DB_PASS = secretJson.password
                    echo "üîê Secrets fetched successfully"
                }
            }
        }

        stage('üßπ Clean Old Configs') {
            steps {
                script {
                    sh """
                        kubectl delete configmap ${APP_NAME}-config --ignore-not-found -n ${NAMESPACE}
                        kubectl delete secret ${APP_NAME}-secret --ignore-not-found -n ${NAMESPACE}
                    """
                }
            }
        }

        stage('üìù Generate values.yaml') {
            steps {
                script {
                    def valuesYaml = """
                    image:
                      repository: ${params.ECR_REPO}
                      tag: "${params.IMAGE_TAG}"
                    namespace: ${NAMESPACE}
                    appName: ${APP_NAME}
                    ingress:
                      enabled: true
                      host: ${APP_NAME}.${params.ENVIRONMENT}.mycorp.com
                    db:
                      user: "${env.DB_USER}"
                      password: "${env.DB_PASS}"
                    """

                    writeFile file: "${VALUES_FILE}", text: valuesYaml
                    echo "‚úÖ Helm values.yaml generated"
                }
            }
        }

        stage('üöÄ Helm Deploy (with Rollback)') {
            steps {
                script {
                    try {
                        sh """
                            helm upgrade --install ${RELEASE_NAME} ./helm/${APP_NAME} \
                                --namespace ${NAMESPACE} \
                                --create-namespace \
                                -f ${VALUES_FILE}
                        """
                        echo "‚úÖ Helm deploy succeeded"
                    } catch (e) {
                        echo "‚ùå Helm deploy failed. Attempting rollback..."
                        sh "helm rollback ${RELEASE_NAME}"
                        error("Deployment failed and rollback executed")
                    }
                }
            }
        }

        stage('üîÅ Switch Service Traffic') {
            steps {
                script {
                    sh """
                        kubectl patch service ${APP_NAME}-svc \
                            -n ${NAMESPACE} \
                            -p '{"spec":{"selector":{"release":"${RELEASE_NAME}"}}}'
                    """
                }
            }
        }

        stage('üåê Recreate Ingress') {
            steps {
                script {
                    sh """
                        kubectl delete ingress ${APP_NAME}-ingress -n ${NAMESPACE} --ignore-not-found
                        kubectl apply -f helm/${APP_NAME}/templates/ingress.yaml -n ${NAMESPACE}
                    """
                }
            }
        }

        stage('üîç Verify & Notify') {
            steps {
                script {
                    sh "kubectl rollout status deployment/${APP_NAME} -n ${NAMESPACE}"
                    echo "‚úÖ Deployment verified"

                    // Placeholder: Jira update
                    // sh """curl -X POST -H "Authorization: Bearer $JIRA_TOKEN" ..."""
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Deployment completed successfully"
        }
        failure {
            echo "‚ùå Deployment failed. Rollback was attempted"
        }
    }
}
