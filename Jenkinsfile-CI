pipeline {
    agent any
    environment {
        GIT_REPO = 'https://github.com/org/repo.git'
        BRANCH = 'main'
        APP_NAME = 'my-java-app'
        VERSION = "v1.0.${BUILD_NUMBER}"
        ECR_REPO = '123456789012.dkr.ecr.us-east-1.amazonaws.com/my-java-app'
        DOCKER_IMAGE = "${ECR_REPO}:${VERSION}"
        SONARQUBE_ENV = 'SonarQubeServer'
        NEXUS_REPO = 'maven-releases'
        NEXUS_URL = 'http://nexus.mycorp.com/repository/maven-releases/'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${BRANCH}", url: "${GIT_REPO}"
            }
        }

        stage('Compile & Test') {
            steps {
                sh 'mvn clean compile test'
            }
        }

        stage('Code Quality (SonarQube)') {
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    sh "mvn sonar:sonar -Dsonar.projectKey=${APP_NAME}"
                }
            }
        }

        stage('Scan for Vulnerabilities (Trivy)') {
            steps {
                sh 'trivy fs --exit-code 0 --severity HIGH,CRITICAL . || true'
            }
        }

        stage('Package App') {
            steps {
                sh 'mvn package -DskipTests'
            }
        }

        stage('Publish to Nexus') {
            steps {
                sh """
                mvn deploy -DskipTests \
                    -Dnexus.url=${NEXUS_URL} \
                    -DaltDeploymentRepository=${NEXUS_REPO}::default::${NEXUS_URL}
                """
            }
        }

        stage('Build Docker Image') {
            steps {
                sh """
                docker build -t ${DOCKER_IMAGE} .
                docker tag ${DOCKER_IMAGE} ${ECR_REPO}:latest
                """
            }
        }

        stage('Image Scan (Trivy)') {
            steps {
                sh "trivy image --exit-code 0 --severity HIGH,CRITICAL ${DOCKER_IMAGE} || true"
            }
        }

        stage('Push to ECR') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh """
                    aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REPO}
                    docker push ${DOCKER_IMAGE}
                    docker push ${ECR_REPO}:latest
                    """
                }
            }
        }

        stage('Approval to Proceed with CD') {
            steps {
                input message: "Approve deployment of ${DOCKER_IMAGE} to EKS?", ok: 'Deploy'
            }
        }

        stage('Trigger CD Pipeline') {
            steps {
                build job: 'cd-java-app', parameters: [
                    string(name: 'IMAGE_TAG', value: "${VERSION}"),
                    string(name: 'ECR_REPO', value: "${ECR_REPO}")
                ]
            }
        }
    }

    post {
        success {
            echo "✅ CI pipeline completed and CD triggered!"
        }
        failure {
            echo "❌ CI pipeline failed!"
        }
    }
}
